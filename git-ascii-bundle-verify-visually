#!/bin/bash


# This file is meant to aid in verifying that the sha-1 hashes used as filenames don't
# contain any meaningful data other than that which is already there.



# The first argument is a bundle path:

BUNDLE="${1}"

[ -z "${BUNDLE}" ] && echo "Usage: git-ascii-bundle-verify-visually <bundlePath>" && exit





# Go through all the blobs

echo "The blobs..."

for i in "${BUNDLE}/blob".*
do
	echo "   The file: ${i}"
	echo "   Its hash: $(git hash-object -t blob """${i}""")"
done



# Go through all the commits

echo "The commits..."

for i in "${BUNDLE}/commit".*
do
	echo "   The file: ${i}"
	echo "   Its hash: $(git hash-object -t commit """${i}""")"
done




# Go through all the trees
# This is more complicated because git has a special format for their trees which is not
# human-readable. We have a script that makes them human readable: treedecode. The other
# script reverses that, which is what we have to do to make 'git hash-object' work correctly.
# To show that this script works, I'll actually create a second file with the other function
# and call 'diff'. The diff tool only prints anything if the files are actually different.

echo "The trees..."

ENCODED_TMP="/tmp/$(uuidgen)"
DECODED_TMP="/tmp/$(uuidgen)"

for i in "${BUNDLE}/tree".*
do
	# Encode the tree and hash it
	git-tree-encode "${i}" ${ENCODED_TMP} # decodes that tree and saves it in the temporary location
	echo "   The file: ${i}"
	echo "   Its hash: $(git hash-object -t tree """${ENCODED_TMP}""")"
	
	# Also re-decode it and perform a diff
	treedecode "${ENCODED_TMP}" "${DECODED_TMP}"
	diff "${i}" "${DECODED_TMP}"
	
	# Clean up
	rm "${ENCODED_TMP}" "${DECODED_TMP}"
done




